import telebot
import sqlite3
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("BOTTOKEN"))

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = 'data.db'

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@bot.message_handler(commands=['start'])
def start_message(message, callback_data=None):

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text='–°—Ç—É–¥–µ–Ω—Ç', callback_data='role_student'))
    markup.add(telebot.types.InlineKeyboardButton(text='–í–∏–∫–ª–∞–¥–∞—á', callback_data='role_teacher'))
    bot.send_message(message.chat.id, text="–í—ñ—Ç–∞—é! –•—Ç–æ –í–∏?", reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):

    print('***\t', call.data)
    if call.data == "role_student":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–í–∏ —Å—Ç—É–¥–µ–Ω—Ç. –û–±–µ—Ä—ñ—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
        offer_faculties(call.message)

    if call.data == "role_teacher":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–í–∏ –≤–∏–∫–ª–∞–¥–∞—á. –û–±–µ—Ä—ñ—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
        offer_faculties(call.message)

    if call.data.startswith("fc_"):
        faculty_id = int(call.data.split('_')[1])
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {faculty_id}. –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å:")
        offer_courses_by_faculty(call.message, faculty_id)

    elif call.data.startswith("course_"):
        parts = call.data.split('_')
        faculty_id = int(parts[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º faculty_id –∏–∑ callback_data
        course_id = int(parts[2])   # –ò–∑–≤–ª–µ–∫–∞–µ–º course_id –∏–∑ callback_data
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {course_id}. –û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:")
        offer_groups_by_course_and_faculty(call.message, faculty_id, course_id)


    elif call.data.startswith("gr_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É
        group_id = int(call.data.split('_')[1])
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É: {group_id}. –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–±—ñ—Ä!")
        offer_schedule_for_group(call.message,group_id)

# –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∫–∞–∫ inline-–∫–Ω–æ–ø–∫–∏.
def offer_faculties(message):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        bot_db = sqlite3.connect(db_path)
        cur = bot_db.cursor()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
        sql = '''
            SELECT id, name FROM faculties
        '''
        faculties = cur.execute(sql).fetchall()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = telebot.types.InlineKeyboardMarkup()
        for faculty_id, faculty_name in faculties:
            markup.add(telebot.types.InlineKeyboardButton(
                text=faculty_name,
                callback_data=f"fc_{faculty_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(message.chat.id, text="–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=markup)

    except sqlite3.Error as e:
        bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        bot_db.close()


# –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞, –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
def offer_courses_by_faculty(message, faculty_id):
    try:
        bot_db = sqlite3.connect(db_path)
        cur = bot_db.cursor()
    
        sql = '''
            SELECT id, name FROM course WHERE faculty_id = ?
        '''
        courses = cur.execute(sql, (faculty_id,)).fetchall()

        if not courses:
            bot.send_message(message.chat.id, "–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É.")
            return

        markup = telebot.types.InlineKeyboardMarkup()
        for course_id, course_name in courses:
            # –î–æ–±–∞–≤–ª—è–µ–º faculty_id –≤ callback_data
            markup.add(telebot.types.InlineKeyboardButton(
                text=course_name,
                callback_data=f"course_{faculty_id}_{course_id}"
            ))

        bot.send_message(message.chat.id, text="–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å:", reply_markup=markup)

    except sqlite3.Error as e:
        bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        bot_db.close()


# –≤—ã–±–æ—Ä –≥—Ä—É–ø—ã, –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
def offer_groups_by_course_and_faculty(message, faculty_id, course_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º –∏ –∫—É—Ä—Å–æ–º.
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        bot_db = sqlite3.connect(db_path)
        cur = bot_db.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        sql = '''
            SELECT id, name 
            FROM groups 
            WHERE faculty_id = ? AND course_id = ?
        '''
        groups = cur.execute(sql, (faculty_id, course_id)).fetchall()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø—ã
        if not groups:
            bot.send_message(message.chat.id, "–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É —ñ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = telebot.types.InlineKeyboardMarkup()
        for group_id, group_name in groups:
            markup.add(telebot.types.InlineKeyboardButton(
                text=group_name,
                callback_data=f"gr_{group_id}"
            ))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(message.chat.id, text="–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:", reply_markup=markup)

    except sqlite3.Error as e:
        bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        bot_db.close()


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
def offer_schedule_for_group(message, group_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        bot_db = sqlite3.connect(db_path)
        cur = bot_db.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞
        sql = '''
            SELECT day_of_week, lesson_number, subject, teacher_name, video_link
            FROM schedule
            WHERE group_id = ?
            ORDER BY 
                CASE day_of_week
                    WHEN 'Monday' THEN 1
                    WHEN 'Tuesday' THEN 2
                    WHEN 'Wednesday' THEN 3
                    WHEN 'Thursday' THEN 4
                    WHEN 'Friday' THEN 5
                    WHEN 'Saturday' THEN 6
                    WHEN 'Sunday' THEN 7
                END, lesson_number
        '''
        schedule = cur.execute(sql, (group_id,)).fetchall()

        if not schedule:
            bot.send_message(message.chat.id, "–ù–∞ –∂–∞–ª—å, –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É.")
            return

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        days_translation = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': '–ü‚Äô—è—Ç–Ω–∏—Ü—è',
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }

         # –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        schedule_by_day = {day: [] for day in days_translation.keys()}
        for entry in schedule:
            day, lesson_number, subject, teacher, link = entry
            schedule_by_day[day].append((lesson_number, subject, teacher, link))

         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_text = "üìÖ *–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:*\n\n"
        for day in days_translation.keys():
            schedule_text += f"üîπ *{days_translation[day]}:*\n"  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
            if schedule_by_day[day]:
                for lesson_number, subject, teacher, link in sorted(schedule_by_day[day]):
                    schedule_text += f"  # {lesson_number}) {subject}\n"
                    schedule_text += f"     –í–∏–∫–ª–∞–¥–∞—á:  {teacher}\n"
                    schedule_text += f"     –ü–æ—Å–∏–ª–∞–Ω–Ω—è:  [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó]({link})\n"
            else:
                schedule_text += "  –ù–µ–º–∞—î –∑–∞–Ω—è—Ç—å\n"
            schedule_text += "\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, schedule_text, parse_mode='Markdown', disable_web_page_preview=True)

    except sqlite3.Error as e:
        bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        bot_db.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)